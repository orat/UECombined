<?xml version="1.0" encoding="UTF-8"?>

<!--
    Document   :    UEGeneral2+Cluster
    Author     :    Oliver Rettig
   
    Description: - Testweise Bestimmung des SARASchultergelenkszentrums für die rechte Seite mit dynamischer Calibration
                 - Bestimmung des Ellenbogengelenkszentrum durch dynamische Calibration:
                   Frames im Intervall/Phase [RHS;LHS] werden verwendet.
                 - Head angles und Thorax-Achsen mit statischer Kalibration
                 - RthoraxRefISB is the main referential. Its axis are not set relative
                   to the vertical like in the other versions.
                   
    ToDo
    !!!          - For Points/Vector, we can't use calibratesIncludes with Includes. It will be fixed one day  
    V1.2: adjunkte rotation, globe via euler-winkel, Phasen für abduk/ante/retro   
    V1.3: Cluster ergänzt nach ISB
    
    ToDo
    - GHJC scheint HUMC nicht zu verwenden HUMC kommt auch nicht auf dem Humerus zu liegen
      Fehlersuche ...
    - GHJCGamage auf Basis des Cluster anstatt auf Basis des Clavicle-Systems bestimmen
    - GHJC am Acromion-Cluster festmachen statt nach HUX, Darstellung in grün zum vergleichen
    - verschiedene Kalibrationsbewegungen zur Bestimmung von GHJC ausprobieren
    - ISB-Thorax-Achsen ersetzen durch Thorax_ISB Koordinatensystem
    
-->
<CalcModel version="1.3">

     <Real name="T">t*1.0</Real>
    
     <!--SubModel name="RightSide"
               includes="right"-->
        <!--Phase name="RCycle" startEvent="RHS" endEvent="RTO" process="post" 
               includes="dynamic"/>
        <Phase name="RCycle1" startEvent="RHS" endEvent="RG" process="post" 
               includes="dynamic"/>
        <Phase name="RCycle2" startEvent="RG" endEvent="RTO" process="post" 
               includes="dynamic"/-->
     <!--/SubModel-->
     
     <!--SubModel name="LeftSide"
               includes="left">
        <Phase name="LCycle" startEvent="LHS" endEvent="LTO" process="post" 
               includes="dynamic"/>
        <Phase name="LCycle1" startEvent="LHS" endEvent="LG" process="post" 
               includes="dynamic"/>
        <Phase name="LCycle2" startEvent="LG" endEvent="LTO" process="post" 
               includes="dynamic"/>
     </SubModel-->
    
     <Phase name="RCycle" startEvent="GHS" endEvent="GTO" process="post" 
               includes="right_dynamic"/>
     <Phase name="LCycle" startEvent="GHS" endEvent="GTO" process="post" 
               includes="left_dynamic"/>
      
     <Phase name="RCycleFW" startEvent="RHS" endEvent="RHS" process="post" 
               contiguous="false" includes="dynamic"/>
     <Phase name="LCycleFW" startEvent="LHS" endEvent="LHS" process="post" 
               contiguous="false" includes="dynamic"/>
     
     <Phase name="RCycleA" startEvent="RG" endEvent="RG" process="post" 
               contiguous="false" includes="dynamic"/>
     <Phase name="LCycleA" startEvent="LG" endEvent="LG" process="post" 
               contiguous="false" includes="dynamic"/>
     
     <Phase name="RCycleBW" startEvent="RTO" endEvent="RTO" process="post" 
               contiguous="false" includes="dynamic"/>
     <Phase name="LCycleBW" startEvent="LTO" endEvent="LTO" process="post" 
               contiguous="false" includes="dynamic"/>
     
     <!-- locator --> 
    
     <Point name="P"
           includes="locator">LOCATOR3+normalize(LOCATOR1-LOCATOR3)*LocatorLength</Point>
    
    
     <!-- T8 -->
           
     <CoordinateSystem name="Thorax_Cluster"
              Position="THRX1"
              FirstAxis="THRX2-THRX1"
              DefiningVector="THRX3-THRX1"
              orientation="xyz"/>    
     <Point name="T8"
              coordinateSystem="Thorax_Cluster"
              calibrateIncludes="static_calibrate_T8"
              excludes="static_calibrate_left_GH,static_calibrate_right_GH">P</Point>
      
              
     <!-- LSHO und RSHO via locator beschaffen -->
    
     <CoordinateSystem name="Right_Acromion"
          Position="RSCAP1"
          FirstAxis="RSCAP2-RSCAP1"
          DefiningVector="RSCAP3-RSCAP1"
          orientation="xyz"/> 
     <Point name="RSHO"
          coordinateSystem="Right_Acromion"
          calibrateIncludes="static_calibrate_right_GH"
          excludes="static_calibrate_left_GH">P</Point>
          
     <CoordinateSystem name="Left_Acromion"
              Position="LSCAP1"
              FirstAxis="LSCAP2-LSCAP1"
              DefiningVector="LSCAP3-LSCAP1"
              orientation="xyz"/> 
     <Point name="LSHO"
          coordinateSystem="Left_Acromion"
          calibrateIncludes="static_calibrate_left_GH"
          excludes="static_calibrate_right_GH">P</Point>        

     <!-- Cluster -->
        
     <!-- clavicula -->

     <Point name="RSC"
          coordinateSystem="Thorax_Cluster"
          calibrateIncludes="static_calibrate_right_SC"
          includes="static,dynamic"
          excludes="static_calibrate_right_GH,static_calibrate_left_GH,static_calibrate_T8">P</Point>
     <!-- art acromioclavicularis-->
     <Point name="RAC"
          coordinateSystem="Right_Acromion"
          calibrateIncludes="static_calibrate_right_AC"
          includes="static,dynamic"
          excludes="static_calibrate_right_GH,static_calibrate_left_GH,static_calibrate_T8,static_calibrate_right_SC">P</Point>


     <!-- Scapula -->

     <!-- CreateBodySegmentAdv('Right_Acromion', 4, [12 13 14]);% segment 4-->
     <!-- trig spin scap-->
     <Point name="RTS"
          coordinateSystem="Right_Acromion"
          calibrateIncludes="static_calibrate_right_TS"
          excludes="static_calibrate_right_GH,static_calibrate_left_GH,static_calibrate_T8,static_calibrate_right_SC,static_calibrate_right_AC">P</Point>
     <!-- ang inferior-->
     <Point name="RAI"
          coordinateSystem="Right_Acromion"
          calibrateIncludes="static_calibrate_right_AI"
          excludes="static_calibrate_right_GH,static_calibrate_left_GH,static_calibrate_T8,static_calibrate_right_SC,static_calibrate_right_AC,static_calibrate_right_TS">P</Point>

     <!-- ang acromialis-->
     <Point name="RAA"
          coordinateSystem="Right_Acromion"
          calibrateIncludes="static_calibrate_right_AA">P</Point>  
     <!-- proc coraco�deus-->
     <!--Point name="RPC"
          coordinateSystem="Right_Acromion"
          calibrateIncludes="static_calibrate_right_PC"
          excludes="static_calibrate_right_AA,static_calibrate_left_AA,static_calibrate_T8,static_calibrate_right_SC,static_calibrate_right_AC,static_calibrate_right_TS,static_calibrate_right_AI">P</Point-->


     <!-- left side Cluster -->
        
     <!-- clavicula -->

     <Point name="LSC"
          coordinateSystem="Thorax_Cluster"
          calibrateIncludes="static_calibrate_left_SC"
          excludes="static_calibrate_right_AA,static_calibrate_left_AA,static_calibrate_T8,static_calibrate_right_SC,static_calibrate_right_AC,static_calibrate_right_TS,static_calibrate_right_AI,static_calibrate_right_PC,static_calibrate_right_EL,static_calibrate_right_EM">P</Point>
     <!-- art acromioclavicularis-->
     <Point name="LAC"
          coordinateSystem="Left_Acromion"
          calibrateIncludes="static_calibrate_left_AC"        
          excludes="static_calibrate_right_AA,static_calibrate_left_AA,static_calibrate_T8,static_calibrate_right_SC,static_calibrate_right_AC,static_calibrate_right_TS,static_calibrate_right_AI,static_calibrate_right_PC,static_calibrate_right_EL,static_calibrate_right_EM,static_calibrate_left_SC">P</Point>


     <!-- Scapula -->

     <!-- CreateBodySegmentAdv('Right_Acromion', 4, [12 13 14]);% segment 4-->
     <!-- trig spin scap-->
     <Point name="LTS"
          coordinateSystem="Left_Acromion"
          calibrateIncludes="static_calibrate_left_TS"
          excludes="static_calibrate_right_AA,static_calibrate_left_AA,static_calibrate_T8,static_calibrate_right_SC,static_calibrate_right_AC,static_calibrate_right_TS,static_calibrate_right_AI,static_calibrate_right_PC,static_calibrate_right_EL,static_calibrate_right_EM,static_calibrate_left_SC,static_calibrate_left_AC">P</Point>
     <!-- ang inferior-->
     <Point name="LAI"
          coordinateSystem="Left_Acromion"
          calibrateIncludes="static_calibrate_left_AI"
          excludes="static_calibrate_right_AA,static_calibrate_left_AA,static_calibrate_T8,static_calibrate_right_SC,static_calibrate_right_AC,static_calibrate_right_TS,static_calibrate_right_AI,static_calibrate_right_PC,static_calibrate_right_EL,static_calibrate_right_EM,static_calibrate_left_SC,static_calibrate_left_AC,static_calibrate_left_TS">P</Point>

     <!-- ang acromialis-->
     <Point name="LAA"
          coordinateSystem="Left_Acromion"
          calibrateIncludes="static_calibrate_left_AA"
          excludes="static_calibrate_right_AA,static_calibrate_left_AA,static_calibrate_T8,static_calibrate_right_SC,static_calibrate_right_AC,static_calibrate_right_TS,static_calibrate_right_AI,static_calibrate_right_PC,static_calibrate_right_EL,static_calibrate_right_EM,static_calibrate_left_SC,static_calibrate_left_AC,static_calibrate_left_TS,static_calibrate_left_AI">P</Point>  
     <!-- proc coraco�deus-->
     <!--Point name="LPC"
          coordinateSystem="Left_Acromion"
          calibrateIncludes="static_calibrate_left_PC"
          excludes="static_calibrate_right_AA,static_calibrate_left_AA,static_calibrate_T8,static_calibrate_right_SC,static_calibrate_right_AC,static_calibrate_right_TS,static_calibrate_right_AI,static_calibrate_right_PC,static_calibrate_right_EL,static_calibrate_right_EM,static_calibrate_left_SC,static_calibrate_left_AC,static_calibrate_left_TS,static_calibrate_left_AI,static_calibrate_left_AA">P</Point-->
                                
    <!-- Stupid referential equivalent to Rvicon. It´s to solve the problem than
         we can use calibrateIncludes only defining a local referential -->
    <CoordinateSystem name="Global"
          Position="vec(0,0,0)"
          FirstAxis="vec(1,0,0)"
          DefiningVector="vec(0,0,1)"
          orientation="xyz"/> 

    <!-- Thorax-Koordinatensystem, T10 is more stable than C7 and the vectors
         used to define the directions are the longest possible -->
    <CoordinateSystem name="ThoraxUncalibrated"
          Position="(CLAV+CLAV)/2.0"
          FirstAxis="T10-CLAV"
          DefiningVector="T10-STRN"
          orientation="xyz"
          excludes="locator"/>

    <!-- The axis respect the orientation of the ISB recommandations but the
         upward axis is defined using the static trial -->
    <!-- MedioLateralAxis: nach rechts
         longitudinal: nach oben 
         AntPost: nach vorne -->
    <Vector name="MedioLateralAxisISBo">normalize((C7-CLAV)*((STRN+T10)/2.0-CLAV))</Vector>
    <Vector name="LongitudinalAxisISBo">normalize((C7+CLAV)/2-(STRN+T10)/2.0)</Vector>
    <Vector name="AntPostAxisISBo">normalize(LongitudinalAxisISBo*MedioLateralAxisISBo)</Vector>

    <Vector name="MedioLateralAxisISB"
          coordinateSystem="ThoraxUncalibrated"
          excludes="locator"
          calibrateIncludes="static_calibrate">MedioLateralAxisISBo</Vector>
    <Vector name="LongitudinalAxisISB"
          excludes="locator"
          coordinateSystem="ThoraxUncalibrated"
          calibrateIncludes="static_calibrate">LongitudinalAxisISBo</Vector>
    <!-- mir scheint, hier fehlt calibrateIncludes, nein, das brauche ich
         nicht, da AntPostAxisISBo als Kreuzprodukt longitudinal und mediolatera axes,
         scheint nach hinten zu zeigen -->
    <Vector name="AntPostAxisISB"
          excludes="locator"
          coordinateSystem="ThoraxUncalibrated">normalize(LongitudinalAxisISBo*MedioLateralAxisISBo)</Vector>
    <!-- so hatte das Laetitia gemacht, aber das ist doch falsch -->
    <!--Vector name="AntPostAxisISB1"
          coordinateSystem="ThoraxUncalibrated">AntPostAxisISBo</Vector-->
    <!-- so sollte es eigentlich auch funktionieren -->
    <!--Vector name="AntPostAxisISB2"
          coordinateSystem="ThoraxUncalibrated"
          calibrateIncludes="static_calibrate">AntPostAxisISBo</Vector-->


    <!-- Thorax axes defined by thorax and pelvis markers -->
    
    <Point name="PELC">(LASI+RASI+SACR)/3.0</Point>
    <!-- PigMo: ThoraxC = (LSHO + RSHO) .* 0.25 + C7 .* 0.5-->
    <Point name="ThoraxC1"
           excludes="locator">(LSHO + RSHO)*0.25 + C7 * 0.5</Point>
    <!-- different from PigMo to be independend from shoulder markers -->
    <Point name="ThoraxC2">(CLAV+C7)*0.5</Point>
    
    
    <!-- Thorax axes calibrated with Pelvis positions -->
    
    <!-- nach oben --> 
    <Vector name="LongitudinalAxisHDCal"
          coordinateSystem="ThoraxUncalibrated"
          calibrateIncludes="static_calibrate"
          excludes="locator">normalize(ThoraxC1-PELC)</Vector>
          
    <!-- nach vorne unten
         so hatte ich das im Shouldergirdle-Paper gemacht
         Achtung: Das kein Kreuzprodukt verwendert, damit stehen die 3 Thorax-Achsen nicht alle senkrecht aufeinander -->
    <Vector name="AntPostAxisHDCal0"
          coordinateSystem="ThoraxUncalibrated"
          calibrateIncludes="static_calibrate"
          excludes="locator">normalize(CLAV-(RSHO+LSHO)*0.5)</Vector>
          
    <!--  nach rechts -->
    <Vector name="MedioLateralAxisHDCal"
            excludes="static_calibrate,locator">AntPostAxisHDCal0*LongitudinalAxisHDCal</Vector>
    
    <!-- neu: ant-post als Kreuzprodukt --> 
    <Vector name="AntPostAxisHDCal"
            excludes="static_calibrate,locator">LongitudinalAxisHDCal*MedioLateralAxisHDCal</Vector>
    
    
    <!-- 3d Stickfigure -->
    
    <Point name="LongitudinalAxisHDCalEnd"
           excludes="static_calibrate,locator">normalize(LongitudinalAxisHDCal)*500.0+PELC</Point>
    <Point name="AntPostAxisHDCalEnd"
           excludes="static_calibrate,locator">normalize(AntPostAxisHDCal)*100.0+PELC</Point>
    
    <Vector name="AntPostAxisHDCalScaled"
            excludes="static_calibrate,locator">normalize(LongitudinalAxisHDCal*MedioLateralAxisHDCal)*dist(C7,CLAV)</Vector>
    <Vector name="MedioLateralAxisHDCalScaled"
            excludes="static_calibrate,locator">normalize(AntPostAxisHDCal0*LongitudinalAxisHDCal)*dist(C7,CLAV)</Vector>
    <Vector name="LongitudinalAxisHDCalScaled"
            excludes="static_calibrate,locator">normalize(LongitudinalAxisHDCal)*dist(ThoraxC1,PELC)</Vector>
   
    
    <!-- statischer Trial als globale Referenz -->
    
    <Vector name="AntPostAxisRefHDCal0"
          coordinateSystem="Global"
          calibrateIncludes="static_calibrate"
          excludes="static_calibrate,static_calibrate_ellbow,static_calibrate_shoulder,static_calibrate_shoulder2,dynamic_calibrate_left_ellbow,dynamic_calibrate_right_ellbow,dynamic_calibrate_left_shoulder,dynamic_calibrate_right_shoulder,locator">normalize(CLAV-(RSHO+LSHO)*0.5)</Vector>
    <Vector name="LongitudinalAxisRefHDCal"
          coordinateSystem="Global"
          calibrateIncludes="static_calibrate"
          excludes="static_calibrate,static_calibrate_ellbow,static_calibrate_shoulder,static_calibrate_shoulder2,dynamic_calibrate_left_ellbow,dynamic_calibrate_right_ellbow,dynamic_calibrate_left_shoulder,dynamic_calibrate_right_shoulder,locator">normalize(ThoraxC1-PELC)</Vector>
    <Vector name="MedioLateralAxisRefHDCal"
          coordinateSystem="Global"
          excludes="static_calibrate,static_calibrate_ellbow,static_calibrate_shoulder,static_calibrate_shoulder2,dynamic_calibrate_left_ellbow,dynamic_calibrate_right_ellbow,dynamic_calibrate_left_shoulder,dynamic_calibrate_right_shoulder,locator">AntPostAxisRefHDCal0*LongitudinalAxisRefHDCal</Vector>
    
    <Vector name="AntPostAxisRefHDCal"
          coordinateSystem="Global"
          excludes="static_calibrate,static_calibrate_ellbow,static_calibrate_shoulder,static_calibrate_shoulder2,dynamic_calibrate_left_ellbow,dynamic_calibrate_right_ellbow,dynamic_calibrate_left_shoulder,dynamic_calibrate_right_shoulder,locator">LongitudinalAxisRefHDCal*MedioLateralAxisRefHDCal</Vector>
   
    
    
    
    <!--  ____________________________________________Trunk Bewegung -->
    <!-- The axis respect the orientation of the ISB recommandations -->
    <Vector name="MedioLateralAxisRefISB"
          coordinateSystem="Global"
          calibrateIncludes="static_calibrate"
          excludes="locator,static_calibrate,static_calibrate_ellbow,static_calibrate_shoulder,static_calibrate_shoulder2,dynamic_calibrate_left_ellbow,dynamic_calibrate_right_ellbow,dynamic_calibrate_left_shoulder,dynamic_calibrate_right_shoulder">MedioLateralAxisISBo</Vector>
    <Vector name="LongitudinalAxisRefISB"
          coordinateSystem="Global"
          calibrateIncludes="static_calibrate"
          excludes="locator,static_calibrate,static_calibrate_ellbow,static_calibrate_shoulder,static_calibrate_shoulder2,dynamic_calibrate_left_ellbow,dynamic_calibrate_right_ellbow,dynamic_calibrate_left_shoulder,dynamic_calibrate_right_shoulder">LongitudinalAxisISBo</Vector>
    <Vector name="AntPostAxisRefISB"
          coordinateSystem="Global"
          excludes="locator,static_calibrate,static_calibrate_ellbow,static_calibrate_shoulder,static_calibrate_shoulder2,dynamic_calibrate_left_ellbow,dynamic_calibrate_right_ellbow,dynamic_calibrate_left_shoulder,dynamic_calibrate_right_shoulder">AntPostAxisISBo</Vector>
          
          
    <!-- Head angles -->

    <!-- TODO mit static trial kalibrierte Achsen bauen -->
    <!-- Achse nach oben -->
    <!--Vector name="HeadUpDownAxis">normalize((RMAS-LMAS)*(HEAD-LMAS))</Vector-->
    <!-- Achse nach links -->
    <!--Vector name="HeadLatMedAxis">normalize(LMAS-RMAS)</Vector-->
    <!-- Achse nach vorne -->
    <!--Vector name="HeadAntPostAxis">HeadLatMedAxis*HeadUpDownAxis</Vector-->

 
     <!-- head Tilt als Projektionswinkel -->
    <!-- MedioLateralAxisRefISB nach rechts
         LongitudinalAxisRefISB nach unten -->
    <!-- HeadUpDownAxis nach oben -->
    <!--ProjectionAngle name="HeadTiltProjA"
                    Axis="-MedioLateralAxisISB"
                    FirstVector="HeadUpDownAxis"
                    SecondVector="AntPostAxisISB"
                    unsigned="false"
                    useOffset="false"
                    includes="dynamic"/>
    <Real name="HeadTiltProjAngle"
          includes="dynamic">90.0-HeadTiltProjAAngle</Real-->

   <!-- Head Obliquity (proj) -->
    <!-- AntPostAxis zeigt nach vorne -->
    <!-- HeadUpDownAxis nach oben -->
    <!-- MedioLateralAxis zeigt nach rechts -->
    <!--ProjectionAngle name="RHeadObliquityProjA"
                Axis="AntPostAxisISB"
                SecondVector="MedioLateralAxisISB"
                FirstVector="HeadUpDownAxis"
                unsigned="false"
                useOffset="false"
                includes="dynamic"/>
    <Real name="RHeadObliquityProjAngle"
          includes="dynamic">RHeadObliquityProjAAngle-90.0</Real>
    <ProjectionAngle name="LHeadObliquityProjA"
                Axis="-AntPostAxisISB"
                FirstVector="-MedioLateralAxisISB"
                SecondVector="HeadUpDownAxis"
                unsigned="false"
                useOffset="false"
                includes="dynamic"/>
    <Real name="LHeadObliquityProjAngle"
          includes="dynamic">LHeadObliquityProjAAngle-90.0</Real-->


    <!--ProjectionAngle name="RHeadRotProj"
                Axis="TrunkZ"
                FirstVector="-HeadLatMedAxis"
                SecondVector="-HorizontalAxis"
                unsigned="false"
                useOffset="false"
                includes="dynamic"/>
    <ProjectionAngle name="LHeadRotProj"
                Axis="-TrunkZ"
                FirstVector="HeadLatMedAxis"
                SecondVector="HorizontalAxis"
                unsigned="false"
                useOffset="false"
                includes="dynamic"/-->

    <!-- Trunk -->
    
    <!-- AntPostAxis zeigt nach vorne -->
    <ProjectionAngle name="RTrunkObliquity"
          Axis="AntPostAxisRefISB"
          FirstVector="LongitudinalAxisISB"
          SecondVector="LongitudinalAxisRefISB"
          unsigned="false"
          useOffset="false"
          includes="dynamic"/>
    <ProjectionAngle name="LTrunkObliquity"
          Axis="-AntPostAxisRefISB"
          FirstVector="LongitudinalAxisISB"
          SecondVector="LongitudinalAxisRefISB"
          unsigned="false"
          useOffset="false"
          includes="dynamic"/>
    <!-- MedioLateralAxisRefISB zeigt nach vorne -->
    <ProjectionAngle name="TrunkTilt"
          Axis="MedioLateralAxisRefISB"
          FirstVector="LongitudinalAxisRefISB"
          SecondVector="LongitudinalAxisISB"
          unsigned="false"
          useOffset="false"
          includes="dynamic"/>

    <!-- Internal/external axial rotation -->
    <!--ProjectionAngle name="TrunkRotation"
          Axis="-LongitudinalAxisRefISB"
          FirstVector="AntPostAxisRefISB"
          SecondVector="AntPostAxisISB"
          unsigned="false"
          useOffset="false"
          includes="dynamic"/-->

    
    <!-- Trunk with Pelvis markers -->

    <ProjectionAngle name="RTrunkObliquityHDCal"
          Axis="AntPostAxisRefHDCal"
          FirstVector="LongitudinalAxisHDCal"
          SecondVector="LongitudinalAxisRefHDCal"
          unsigned="false"
          useOffset="false"
          includes="dynamic"/>
    <ProjectionAngle name="LTrunkObliquityHDCal"
          Axis="-AntPostAxisRefHDCal"
          FirstVector="LongitudinalAxisHDCal"
          SecondVector="LongitudinalAxisRefHDCal"
          unsigned="false"
          useOffset="false"
          includes="dynamic"/>
    <ProjectionAngle name="TrunkTiltHDCal"
          Axis="MedioLateralAxisRefHDCal"
          FirstVector="LongitudinalAxisRefHDCal"
          SecondVector="LongitudinalAxisHDCal"
          unsigned="false"
          useOffset="false"
          includes="dynamic"/>
    <!--ProjectionAngle name="TrunkRotationHDCal"
          Axis="-LongitudinalAxisRefHDCal"
          FirstVector="AntPostAxisRefHDCal"
          SecondVector="AntPostAxisHDCal"
          unsigned="false"
          useOffset="false"
          includes="dynamic"/-->
    
    <!-- Abstand des Schultergelenkszentrums senkrecht unterhalb der RSHO/LSHO Marker nach Rab -->
    <Real name="RabShoulderDist"
           calibrateIncludes="static_calibrate"
           excludes="locator">RabShoulderOffset*dist(RSHO,LSHO)</Real>


    <!--SubModel name="RightSide"
              includes="right"-->
           
        <!-- Elbow flexion axis - functional calibration -->
        
        <!-- Bestimmung einer groben Scharniergelenksachse ohne jede Calibration -->
        <Point name="RWJC">RULN+0.2*(RRAD-RULN)</Point>        
        
        <!-- nach Gamage 2002 -->
        
        <CoordinateSystem name="R_RElbow"
              Position="RWJC*1.0"
              FirstAxis="normalize(RWJC-RELB)"
              DefiningVector="normalize(RWJC-RELBW)"/>   
        <Point name="RLEP"
               coordinateSystem="R_RElbow"
               excludes="locator"
               calibrateIncludes="static_calibrate">RELBW</Point>
        <Point name="RMEP"
               coordinateSystem="R_RElbow"
               excludes="locator"
               calibrateIncludes="static_calibrate">RELB</Point>
        <Point name="REJC0"
               excludes="locator">(RLEP+RMEP)/2.0</Point>
        <Vector name="RElbowHingeSimpleAxis"
                excludes="locator">normalize(RLEP-RMEP)</Vector>
        <AoRGamage2002 name="RElbowHinge"
               coordinateSystem="R_RElbow"
               ReferencePoint="REJC0"
               SignAxis="RElbowHingeSimpleAxis"
               startEventType="RHS"
               endEventType="RTO"
               calibrateIncludes="dynamic_calibrate_right_ellbow"
               includes="static_calibrate_shoulder2,static_calibrate_shoulder3,dynamic_calibrate_right_ellbow,dynamic_calibrate_right_shoulder,dynamic,static">RHUMS</AoRGamage2002>         
              
        <!-- SARA -->
        
        <CoordinateSystem name="RHumerusS"
              Position="RHUMS"
              FirstAxis="normalize(RHUMA-RHUMP)"
              Line="normalize(RHUMS-RHUMA)"
              orientation="xyz"
              excludes="locator"/>
        <AoRSARA name="RElbowHingeSARA"
                 coordinateSystem="R_RElbow"
                 ReferencePoint="REJC0"
                 considerSymmetricSolution="false"
                 movingCoordinateSystem="RHumerusS"
                 SignAxis="RElbowHingeSimpleAxis"
                 startEventType="RHS"
                 endEventType="RTO"
                 calibrateIncludes="dynamic_calibrate_right_ellbow"
                 includes="static_calibrate_shoulder2,dynamic_calibrate_right_ellbow,dynamic_calibrate_right_shoulder,dynamic,static"/>       
              
        <Point name="REJC"
               includes="static_calibrate_shoulder2,static_calibrate_shoulder3,dynamic_calibrate_right_shoulder,dynamic,static">RElbowHingeOrigin</Point>
        
        <!-- Visualisation right elbow axis -->
        <Point name="RElbowAxisHead"
               includes="static_calibrate_shoulder2,dynamic_calibrate_right_shoulder,dynamic">RElbowHingeOrigin+100*RElbowHingeAxis</Point>
             
        <!-- Visualisation right elbow axis determined by SARA -->
        <Point name="REJCSARA"
               includes="static_calibrate_shoulder2,dynamic_calibrate_right_shoulder,dynamic,static">RElbowHingeSARAOrigin</Point>
        <Point name="RElbowAxisHeadSARA"
               includes="static_calibrate_shoulder2,dynamic_calibrate_right_shoulder,dynamic">RElbowHingeSARAOrigin+100*RElbowHingeSARAAxis</Point>
    
                                    
        <!-- right shoulder joint center  -->
        
        <!-- other referential for the computation of the corrected shoulder position -->       
        <CoordinateSystem name="R_RThorax"
              Position="CLAV"
              FirstAxis="MedioLateralAxisISB"
              Line="AntPostAxisISB"
              orientation="xyz"
              excludes="locator,static_calibrate,static_calibrate_ellbow,dynamic_calibrate_left_ellbow,dynamic_calibrate_right_ellbow"/>
     
        <CoordinateSystem name="RClavicle"
              Position="(RSHO+RSHO)/2.0"
              FirstAxis="normalize(RSHO-CLAV)"
              Line="normalize(LongitudinalAxisISB)"
              orientation="xyz"
              includes="static_calibrate_shoulder,static_calibrate_shoulder2,static_calibrate_shoulder3,dynamic_calibrate_right_shoulder,dynamic,static"/>
              
        <!-- first estimation of elevation angle for phase definitions -->
        <DirectedCosinAngle name="RHumAbdukClav"
             SecondVector="-z(RClavicle)"
             FirstVector="normalize(RHUMS-RSHO)"
             includes="dynamic_calibrate_right_shoulder"/>
        <TDP name="RHumAbdukAngleMin" 
             method="min"
             process="post"
             calibrateIncludes="dynamic_calibrate_right_shoulder"
             includes="dynamic_calibrate_right_shoulder">RHumAbdukClavAngle</TDP>
        <Phase name="RAbduk"                                                         
             process="post"
             calibrateIncludes="dynamic_calibrate_right_shoulder"
             includes="dummy">(RHumAbdukClavAngle &lt; (FuncionalTrialAbdukROM + 10.0 + RHumAbdukAngleMin)) &amp;&amp; (RHumAbdukClavAngle &gt; (10.0 + RHumAbdukAngleMin))</Phase>
  
        <CoRGamage2002 name="RGHJCGamage"
             coordinateSystem="RClavicle"
             phase="RAbduk"
             biasCompensation="true"
             biasCompensationIterations="5"
             calibrateIncludes="dynamic_calibrate_right_shoulder"
             includes="static_calibrate_shoulder2,static_calibrate_shoulder3,dynamic,static">RHUMS</CoRGamage2002>
     
        <!-- Schultergelenkszentrum - Berechnung nach Rab -->
        <Point name="RGHJCRab"
                coordinateSystem="RClavicle"
                includes="static_calibrate_shoulder2,dynamic,static"
                calibrateIncludes="static_calibrate_shoulder">RSHO-vec(0.0,0.0,1.0)*RabShoulderDist</Point>

        <!-- Geometrische Rekonstruktion des Schultergelenkszentrum wie in Rettig2009 beschrieben,
             bei großer Sorgfalt bei den Messungen führt das zu guten Ergebnissen auch bei Überkopfbewegungen,
             leider nicht besonders robust, daher meist nicht im Einsatz 
        <ShoulderJointCenter5 name="RGHJCHD5"
             ElbowJointCenter="REJC"
             ElbowJointAxis="normalize(RElbowHingeAxis)"
             HumerusMarker="RHUMS"
             debug="true"
             useHumerusMarkerCorrection="true"
             useMeanSolution="true"
             calibrateIncludes="static_calibrate_shoulder2"
             includes="static_calibrate_shoulder2,dynamic">RGHJCGamageOrigin</ShoulderJointCenter5>
        -->
        
        <!-- schlecht: Führt dazu dass sich RGHJC beim Schürzengriff stark nach hinten bewegt --> 
        <CoordinateSystem name="RHumerus"
              Position="RHUMS"
              FirstAxis="normalize(RHUMS-REJC)"
              Line="normalize(RElbowHingeAxis)"
              orientation="xyz"
              includes="static_calibrate_shoulder2,static_calibrate_shoulder3,dynamic,static"/>
        
        <!-- mit zusätzlichen Humerus-Markern, besser als RHumerus -->
        <CoordinateSystem name="RHumerusA"
              Position="RHUMS"
              FirstAxis="normalize(RHUMA-RHUMP)"
              Line="normalize(RHUMS-REJC)"
              orientation="xyz"
              excludes="locator"
              includes="static_calibrate_shoulder2,static_calibrate_shoulder3,dynamic"/>

        
        <!-- Besondere Art das Schultergelenkszentrum in Markerkoordinaten des Ober- und
             Unterarms auszudrücken -->
             
        <CoordinateSystem name="RElbow"
              Position="RELB*1.0"
              FirstAxis="normalize(RULN+0.5*(RRAD-RULN)-RELB)"
              DefiningVector="normalize(RULN+0.5*(RRAD-RULN)-RELBW)"/>  
        
        <!-- Projektion von RGHJC auf die Elbow axis -->
        <Point name="REJCA"
              coordinateSystem="RElbow"
              calibrateIncludes="static_calibrate_shoulder2"
              excludes="static_calibrate,static_calibrate_ellbow,static_calibrate_shoulder,dynamic_calibrate_left_ellbow,dynamic_calibrate_right_ellbow,dynamic_calibrate_left_shoulder,dynamic_calibrate_right_shoulder,locator">PocL(REJC, normalize(RElbowHingeAxis),RGHJCGamageOrigin)</Point>
        <!-- Projektion des Acromion-Markers auf die Achse REJC-RGHJC -->
        <!--Point name="RACRC"
              coordinateSystem="RElbow"
              calibrateIncludes="static_calibrate_shoulder2"
              excludes="static_calibrate,static_calibrate_ellbow,static_calibrate_shoulder,dynamic_calibrate_left_ellbow,dynamic_calibrate_right_ellbow,dynamic_calibrate_left_shoulder,dynamic_calibrate_right_shoulder">PocL(REJCA, normalize(RGHJCGamageOrigin - REJCA),RSHO)</Point>
        
        <Point name="RACRC2"
              coordinateSystem="RClavicle"
              calibrateIncludes="static_calibrate_shoulder2"
              excludes="static_calibrate,static_calibrate_ellbow,static_calibrate_shoulder,dynamic_calibrate_left_ellbow,dynamic_calibrate_right_ellbow,dynamic_calibrate_left_shoulder,dynamic_calibrate_right_shoulder">PocL(REJCA, normalize(RGHJCGamageOrigin - REJCA),RSHO)</Point-->
       
     
        <!-- Projektion von RHUM auf die Achse REJC-RGHJC und an dem unzuverlässigen
             Koordinatensystem (RHUMS, RHUMA, RHUMP, REJC) festgemacht  -->
        <Point name="RHUMC"
              coordinateSystem="RHumerusA"
              calibrateIncludes="static_calibrate_shoulder2"
              excludes="static_calibrate,static_calibrate_ellbow,static_calibrate_shoulder,dynamic_calibrate_left_ellbow,dynamic_calibrate_right_ellbow,dynamic_calibrate_left_shoulder,dynamic_calibrate_right_shoulder,locator">PocL(REJCA, normalize(RGHJCGamageOrigin - REJCA),RHUMS)</Point>
        <!-- mit REJC statt REJCA -->
        <!--Point name="RHUMC2"
              coordinateSystem="RHumerusA"
              calibrateIncludes="static_calibrate_shoulder2"
              excludes="static_calibrate,static_calibrate_ellbow,static_calibrate_shoulder,dynamic_calibrate_left_ellbow,dynamic_calibrate_right_ellbow,dynamic_calibrate_left_shoulder,dynamic_calibrate_right_shoulder">PocL(REJC, normalize(RGHJCGamageOrigin - REJC),RHUMS)</Point-->
       
        <!--Real name="RHumLength"
              calibrateIncludes="static_calibrate_shoulder2"
              excludes="static_calibrate,static_calibrate_ellbow,static_calibrate_shoulder,dynamic_calibrate_left_ellbow,dynamic_calibrate_right_ellbow,dynamic_calibrate_left_shoulder,dynamic_calibrate_right_shoulder">length(RGHJCGamageOrigin - REJCA)</Real-->
        <!-- Proximal Humerus length, also von HUMC bis GHJC -->
        <Real name="RHumLengthProx"
              calibrateIncludes="static_calibrate_shoulder2"
              excludes="static_calibrate,static_calibrate_ellbow,static_calibrate_shoulder,dynamic_calibrate_left_ellbow,dynamic_calibrate_right_ellbow,dynamic_calibrate_left_shoulder,dynamic_calibrate_right_shoulder,locator">length(RGHJCGamageOrigin - RHUMC)</Real>
        <!--Real name="RHumLengthProx2"
              calibrateIncludes="static_calibrate_shoulder2"
              excludes="static_calibrate,static_calibrate_ellbow,static_calibrate_shoulder,dynamic_calibrate_left_ellbow,dynamic_calibrate_right_ellbow,dynamic_calibrate_left_shoulder,dynamic_calibrate_right_shoulder">length(RGHJCGamageOrigin - RHUMC2)</Real-->
       
        <!--Real name="RHumACRLength"
              calibrateIncludes="static_calibrate_shoulder2"
              excludes="static_calibrate,static_calibrate_ellbow,static_calibrate_shoulder,dynamic_calibrate_left_ellbow,dynamic_calibrate_right_ellbow,dynamic_calibrate_left_shoulder,dynamic_calibrate_right_shoulder">length(RACRC - REJCA)</Real>
        <Real name="RHumACRLengthProx"
              calibrateIncludes="static_calibrate_shoulder2"
              excludes="static_calibrate,static_calibrate_ellbow,static_calibrate_shoulder,dynamic_calibrate_left_ellbow,dynamic_calibrate_right_ellbow,dynamic_calibrate_left_shoulder,dynamic_calibrate_right_shoulder">length(RACRC - RHUMC)</Real-->
       
        <!-- RGHJC an HUMC, REJCA, elbowaxis und Oberarmlänge festgemacht-->
        <Point name="RGHJC"
              excludes="static_calibrate,static_calibrate_ellbow,static_calibrate_shoulder,dynamic_calibrate_left_ellbow,dynamic_calibrate_right_ellbow,dynamic_calibrate_left_shoulder,dynamic_calibrate_right_shoulder,static_calibrate_shoulder2,locator">RHUMC+normalize(RHUMC - REJCA)*RHumLengthProx</Point>
        <!--Point name="RGHJC2"
              excludes="static_calibrate,static_calibrate_ellbow,static_calibrate_shoulder,dynamic_calibrate_left_ellbow,dynamic_calibrate_right_ellbow,dynamic_calibrate_left_shoulder,dynamic_calibrate_right_shoulder,static_calibrate_shoulder2">RHUMC2+normalize(RHUMC2 - REJC)*RHumLengthProx2</Point-->
        
        <!--Point name="RACR"
              excludes="static_calibrate,static_calibrate_ellbow,static_calibrate_shoulder,dynamic_calibrate_left_ellbow,dynamic_calibrate_right_ellbow,dynamic_calibrate_left_shoulder,dynamic_calibrate_right_shoulder">RHUMC+normalize(RHUMC - REJCA)*RHumACRLengthProx</Point-->
      
        <!-- schlecht: bewegt sich beim Schürzengriff stark nach hinten,
             HUMS + elbow marker + elbow axis Koordidinatensystem wird verwendet -->
        <!--Point name="RGHJCC"
              coordinateSystem="RHumerus"
              calibrateIncludes="static_calibrate_shoulder2"
              excludes="static_calibrate,static_calibrate_ellbow,static_calibrate_shoulder,dynamic_calibrate_left_ellbow,dynamic_calibrate_right_ellbow,dynamic_calibrate_left_shoulder,dynamic_calibrate_right_shoulder">RGHJCGamageOrigin</Point-->
        <!-- besser als RGHJC, Koordinatensystem mehrere Humerusmarker + REJC only -->
        <!--Point name="RGHJCA"
              coordinateSystem="RHumerusA"
              calibrateIncludes="static_calibrate_shoulder2"
              excludes="static_calibrate,static_calibrate_ellbow,static_calibrate_shoulder,dynamic_calibrate_left_ellbow,dynamic_calibrate_right_ellbow,dynamic_calibrate_left_shoulder,dynamic_calibrate_right_shoulder">RGHJCGamageOrigin</Point>
        <DirectedCosinAngle name="RShoulderGirdleDepEleOffsetA"
             FirstVector="normalize(RGHJCA-CLAV)"
             SecondVector="normalize(RSHO-CLAV)"
             includes="dynamic"/-->
     
        <!-- am Clavicle Koordinatensystem mit SHO marker festgemacht -->
        <!--Point name="RGHJCB"
              coordinateSystem="RClavicle"
              calibrateIncludes="static_calibrate_shoulder2"
              excludes="static_calibrate,static_calibrate_ellbow,static_calibrate_shoulder,dynamic_calibrate_left_ellbow,dynamic_calibrate_right_ellbow,dynamic_calibrate_left_shoulder,dynamic_calibrate_right_shoulder">RGHJCGamageOrigin</Point-->
       

        <!--  Schulter/RThorax -->

        <!-- Öffnungswinkel -->
    
        <!-- Shoulder Elevation/Depression -->
        <Angle name="RShoulderEleDepDirCos"
               FirstVector="-LongitudinalAxisISB"
               SecondVector="REJC-RGHJC"
               includes="dynamic"/>
        <Angle name="RShoulderEleDepHDCalDirCos"
               FirstVector="-LongitudinalAxisHDCal"
               SecondVector="REJC-RGHJC"
               includes="dynamic"/>
        
        <!-- Shoulder Abduktion -->
        <Angle name="RShoulderAbdAddJointB0"
               FirstVector="-MedioLateralAxisISB"
               SecondVector="REJC-RGHJC"
               includes="dynamic"/>
        <Real name="RShoulderAbdAddDirCosAngle"
             includes="dynamic">RShoulderAbdAddJointB0Angle-90.0</Real>
        <Angle name="RShoulderAbdAddJointHDCal"
               FirstVector="-MedioLateralAxisHDCal"
               SecondVector="REJC-RGHJC"
               includes="dynamic"/>
        <Real name="RShoulderAbdAddHDCalDirCosAngle"
             includes="dynamic">RShoulderAbdAddJointHDCalAngle-90.0</Real>
             
                  
        <!-- Phasen und Events für normierte Darstellungen von Kurven -->
        
        <!-- Phasen bei denen die Elevation kleine 30 grad ist -->
        <Phase name="RAbdukStart" 
           process="post" minwidth="10"
           value="RShoulderEleDepHDCalDirCosAngle*1.0" 
           includes="dynamic_abduk_events">RShoulderEleDepHDCalDirCosAngle &lt; 30.0</Phase>
        <Event name="RAbdukMin" phase="RAbdukStart" method="min"
               includes="dynamic_abduk_events" process="post">RShoulderEleDepHDCalDirCosAngle*1.0</Event>   
        <Phase name="RAbdukPhase" 
           process="post" maxvalue="40.0" minwidth="40"
           startEvent="RAbdukMin" endEvent="RAbdukMin"
           value="RShoulderEleDepHDCalDirCosAngle*1.0" 
           includes="dynamic_abduk_events"/>
        <Event name="REleMax" phase="RAbdukPhase" method="max"
               includes="dynamic_abduk_events" process="post">RShoulderEleDepHDCalDirCosAngle*1.0</Event>    
           
           
        <!-- wer braucht das eigentlich noch -->
        
        <Angle name="RGlenohumeralEleDepHDCalDirCos"
               FirstVector="normalize(REJC-RGHJC)"
               SecondVector="normalize(-AntPostAxisHDCal*(CLAV-RGHJC))"
               includes="dynamic"/>
        <Angle name="RGlenohumeralEleDepDirCos"
               FirstVector="normalize(REJC-RGHJC)"
               SecondVector="normalize(-AntPostAxisISB*(CLAV-RGHJC))"
               includes="dynamic"/>    
        
        
        <!-- Projektionswinkel --> 
        
        <!-- Shoulder Abduktion -->
        <ProjectionAngle name="RShoulderAbdAddProj"
             Axis="-AntPostAxisISB"
             FirstVector="-LongitudinalAxisHDCal"
             SecondVector="REJC-RGHJC"
             includes="dynamic"
             unsigned="false"/>
        <ProjectionAngle name="RShoulderAbdAddHDCalProj"
               Axis="-AntPostAxisHDCal"
               FirstVector="-LongitudinalAxisHDCal"
               SecondVector="REJC-RGHJC"
               includes="dynamic"
               unsigned="false"/>
        
        <!-- Shoulder Ante-/Retroversion -->
        <ProjectionAngle name="RShoulderAnteRetroProj"
             Axis="MedioLateralAxisISB"
             FirstVector="-LongitudinalAxisISB"
             SecondVector="REJC-RGHJC"
             unsigned="false"
             includes="dynamic"/>
        <ProjectionAngle name="RShoulderAnteRetroHDCalProj"
             Axis="MedioLateralAxisHDCal"
             FirstVector="-LongitudinalAxisHDCal"
             SecondVector="REJC-RGHJC"
             unsigned="false"
             includes="dynamic"/>
        
        <!-- Öffnungswinkel -->
        
        <!-- Shoulder ante/retro -->
        <Angle name="RShoulderAnteRetroJoint0"
               FirstVector="-AntPostAxisISB"
               SecondVector="REJC-RGHJC"
               includes="dynamic"/>
        <Real name="RShoulderAnteRetroDirCosAngle"
             includes="dynamic">RShoulderAnteRetroJoint0Angle-90.0</Real>
        <Angle name="RShoulderAnteRetroJointHDCal"
               FirstVector="-AntPostAxisHDCal"
               SecondVector="REJC-RGHJC"
               includes="dynamic"/>
        <Real name="RShoulderAnteRetroHDCalDirCosAngle"
             includes="dynamic">RShoulderAnteRetroJointHDCalAngle-90.0</Real>
             
             
        <!-- Phasen und Events für normierte Darstellungen von Kurven -->
         
        <Phase name="RAntePhase" 
           process="post" maxvalue="30.0" minwidth="40"
           value="RShoulderAnteRetroHDCalDirCosAngle*1.0" 
           includes="dynamic_anteretro_events">RShoulderAnteRetroHDCalDirCosAngle &gt; 0.0</Phase>
        <Phase name="RRetroPhase" 
           process="post" minvalue="-25.0" minwidth="40"
           value="RShoulderAnteRetroHDCalDirCosAngle*1.0" 
           includes="dynamic_anteretro_events">RShoulderAnteRetroHDCalDirCosAngle &lt; 0.0</Phase>
   
        <Event name="REleMax" phase="RAntePhase" method="max"
               includes="dynamic_ante_events" process="post">RShoulderAnteRetroHDCalDirCosAngle*1.0</Event> 
        <Event name="REleMax" phase="RRetroPhase" method="min"
               includes="dynamic_retro_events" process="post">RShoulderAnteRetroHDCalDirCosAngle*1.0</Event> 
       
        <!-- Laetitia: Horizontal abduction/adduction oder Horizontal Ante/Retroversion
             Oli: Besser Umstellung auf die Attribute FirstVector, SecondVector -->
        <!-- umstellen: 0 soll vorne sein -->
        <!--ProjectionAngle name="RShoulderHorAbdAddProj"
             Axis="LongitudinalAxisISB"
             JointCenter="RGHJC"
             LeverArmPoint1="RGHJC+MedioLateralAxisISB*500.0"
             LeverArmPoint2="(REJC+REJC)/2.0"
             unsigned="false"
             includes="dynamic"/-->              
             
             
         <!-- Iro/Aro -->
         
         <!-- Projektion in eine Ebene mit Humerus als Normalenvektor -->
         <!-- TODO Elbowaxis statt RWJC verwenden ... 
              TODO via Cardan-Winkel zusätzlich ausrechnen -->
        <ProjectionAngle name="RShoulderIroAroJoint0"
             Axis="(REJC-RGHJC)"
             FirstVector="-LongitudinalAxisISB*(REJC-RGHJC)"
             SecondVector="((REJC-RGHJC)*(RWJC-REJC))*(REJC-RGHJC)"
             includes="dynamic"/>
        <Real name="RShoulderIroAroAngleGlobe"
             includes="dynamic">180.0-RShoulderIroAroJoint0Angle</Real>
             
         <!-- Achtung: geht davon aus, dass in dem Trial Elbowflex vorhanden ist -->
        <ProjectionAngle name="RShoulderIroAroJoint0HDCal"
             Axis="(REJC-RGHJC)"
             FirstVector="-LongitudinalAxisHDCal*(REJC-RGHJC)"
             SecondVector="((REJC-RGHJC)*(RWJC-REJC))*(REJC-RGHJC)"
             includes="dynamic"/>
        <Real name="RShoulderIroAroHDCalAngleGlobe"
             includes="dynamic">180.0-RShoulderIroAroJoint0HDCalAngle</Real>


        <ProjectionAngle name="RShoulderIroAroJoint0HDCal2"
             Axis="(REJC-RGHJC)"
             FirstVector="-LongitudinalAxisHDCal*(REJC-RGHJC)"
             SecondVector="RElbowHingeAxis*(REJC-RGHJC)"
             includes="dynamic"/>
        <Real name="RShoulderIroAroHDCalAngleGlobe2"
             includes="dynamic">180.0-RShoulderIroAroJoint0HDCal2Angle</Real>


        <!-- Pole sollen vorne und hinten sein -->
        <!-- Achtung: geht davon aus, dass in dem Trial Elbowflex vorhanden ist -->
        <ProjectionAngle name="RShoulderIroAroJoint1"
             Axis="(REJC-RGHJC)"
             FirstVector="-AntPostAxisISB*(REJC-RGHJC)"
             SecondVector="((REJC-RGHJC)*(RWJC-REJC))*(REJC-RGHJC)"
             includes="dynamic"
             unsigned="false"/>
        <Real name="RShoulderIroAroAngleGlobeAP"
             includes="dynamic">-RShoulderIroAroJoint1Angle-90.0</Real>

        
        <ProjectionAngle name="RShoulderIroAroJoint1HDCal"
             Axis="(REJC-RGHJC)"
             FirstVector="-AntPostAxisHDCal*(REJC-RGHJC)"
             SecondVector="((REJC-RGHJC)*(RWJC-REJC))*(REJC-RGHJC)"
             unsigned="false"
             includes="dynamic"/>
        <Real name="RShoulderIroAroHDCalAngleGlobeAP"
             includes="dynamic">-RShoulderIroAroJoint1HDCalAngle-90.0</Real>   
            
              
        <!-- Conjunct -->
        <!-- x nach vorne, y nach aussen/rechts, z nach unten -->
        <CoordinateSystem name="RConjunct"
                 Position="RGHJC"
                 FirstAxis="AntPostAxisISB"
                 DefiningVector="-LongitudinalAxisISB"
                 orientation="xyz"
                 includes="dynamic"/>
        <ConjunctRotation name="RShoulderRotation1"
                   coordinateSystem="RConjunct"
                   RadiusVector="normalize(REJC-RGHJC)"
                   PointingVector="-normalize(REJC-RGHJC)*RElbowHingeAxis"
                   includes="dynamic"/>
        <!-- unklar, warum ich das Vorzeichen hier ändern muss -->
        <Real name="RShoulderIroAroAngle"
              includes="dynamic">-RShoulderRotation1Angle</Real>
              
        
        <!-- Verwendung der anhand zusätzlicher Beckenmarker kalibrierter Thorax-Achsen
             x=rot, y=grün, z=blau -->
        <CoordinateSystem name="RThoraxHDCal"
                 Position="RGHJC"
                 FirstAxis="AntPostAxisHDCal"
                 DefiningVector="-LongitudinalAxisHDCal"
                 orientation="xyz"
                 includes="dynamic"/>
        <ConjunctRotation name="RShoulderRotation1HDCal"
                   coordinateSystem="RThoraxHDCal"
                   RadiusVector="normalize(REJC-RGHJC)"
                   PointingVector="-normalize(REJC-RGHJC)*RElbowHingeAxis"
                   includes="dynamic"/>
        <!-- unklar, warum ich das Vorzeichen hier ändern muss -->
        <Real name="RShoulderIroAroHDCalAngle"
              includes="dynamic">-RShoulderRotation1HDCalAngle</Real>

        <!-- x rot vorne
             z blau nach außen
             y grün nach oben bzw. Hum-Achse in Richtung Schulterzentrum -->
        <CoordinateSystem name="RHumuersHDCalA"
                 Position="RGHJC"
                 FirstAxis="normalize(RGHJC-REJC)"
                 DefiningVector="-normalize(RElbowHingeAxis)"
                 orientation="yxz"
                 includes="dynamic"/>
        <CoordinateSystem name="RThoraxHDCalA"
                 Position="RGHJC"
                 FirstAxis="LongitudinalAxisHDCal"
                 DefiningVector="-MedioLateralAxisHDCal"
                 orientation="yxz"
                 includes="dynamic"/>
        <AdjunctRotation name="RShoulderHDAdjunctRotation"
                         basisCoordinateSystem="RThoraxHDCalA"
                         movingCoordinateSystem="RHumuersHDCalA"
                         eventType="RHS"
                         unit="deg"
                         includes="dynamic">vec(0,RShoulderIroAroHDCalAngle,0)</AdjunctRotation>
        <AdjunctRotation name="RShoulderHDAdjunctRotation2"
                         basisCoordinateSystem="RThoraxHDCalA"
                         movingCoordinateSystem="RHumuersHDCalA"
                         unit="deg"
                         includes="dynamic"/>
        <!-- testweise globe AP mit Cardan-Zerlegung darstellen,
             unklar welche Drehreihenfolge richtig ist -->
        <CoordinateSystem name="RHumerusAP"
            Position="RGHJC"
            FirstAxis="normalize(REJC-RGHJC)"
            DefiningVector="RElbowHingeAxis"
            orientation="zyx"
            includes="dynamic"/>
        <!-- unklar ob das stimmt: x nach vorne, y nach aussen/rechts, z nach unten -->
        
        <!--EulerCardanAngles name="RShoulderXYZM"
                     parentCoordinateSystem="RThoraxHDCalA"
                     childCoordinateSystem="RHumuersHDCalA"
                     orientation="xyz"
                     implementation="mantissa"
                     includes="dynamic"/-->
        <!--EulerCardanAngles name="RShoulderYXY"
                     parentCoordinateSystem="RThoraxHDCalA" 
                     childCoordinateSystem="RHumuersHDCalA" 
                     orientation="yxy" 
                     includes="dynamic"/> 
        <EulerCardanAngles name="RShoulderYXY1" 
                     parentCoordinateSystem="RThoraxHDCalA" 
                     childCoordinateSystem="RHumuersHDCalA" 
                     orientation="yxy" 
                     method="fix1" 
                     includes="dynamic"/-->
        <EulerCardanAngles name="RShoulderIroAroHDCalAngleGlobe3A"
                     parentCoordinateSystem="RThoraxHDCalA"
                     childCoordinateSystem="RHumuersHDCalA"
                     orientation="yxy"
                     method="fix2"
                     includes="dynamic"/>
        <Real name="RShoulderIroAroHDCalAngleGlobe3"
             includes="dynamic">z(RShoulderIroAroHDCalAngleGlobe3AAngles)</Real>
        <!--EulerCardanAngles name="RShoulderXYZ"
                     parentCoordinateSystem="RThoraxHDCalA"
                     childCoordinateSystem="RHumuersHDCalA"
                     orientation="xyz"
                     includes="dynamic"/-->
        <!--EulerCardanAngles name="RShoulderXYZ1"
                     parentCoordinateSystem="RThoraxHDCalA"
                     childCoordinateSystem="RHumuersHDCalA"
                     method="fix1"
                     orientation="xyz"
                     includes="dynamic"/>
        <EulerCardanAngles name="RShoulderXYZ2"
                     parentCoordinateSystem="RThoraxHDCalA"
                     childCoordinateSystem="RHumuersHDCalA"
                     method="fix2"
                     orientation="xyz"
                     includes="dynamic"/-->
        
        <!--EulerCardanAngles name="RShoulderXZY"
                     parentCoordinateSystem="RThoraxHDCalA"
                     childCoordinateSystem="RHumuersHDCalA"
                     orientation="xzy"
                     includes="dynamic"/>
        <EulerCardanAngles name="RShoulderYXZ"
                     parentCoordinateSystem="RThoraxHDCalA" 
                     childCoordinateSystem="RHumuersHDCalA"
                     orientation="yxz"  
                     includes="dynamic"/> 
        <EulerCardanAngles name="RShoulderYZX"
                     parentCoordinateSystem="RThoraxHDCalA"
                     childCoordinateSystem="RHumuersHDCalA"
                     orientation="yzx" 
                     includes="dynamic"/>
        <EulerCardanAngles name="RShoulderZXY"
                     parentCoordinateSystem="RThoraxHDCalA"
                     childCoordinateSystem="RHumuersHDCalA"
                     orientation="zxy"
                     includes="dynamic"/>
        <EulerCardanAngles name="RShoulderZYX"
                     parentCoordinateSystem="RThoraxHDCalA"
                     childCoordinateSystem="RHumuersHDCalA"
                     orientation="zyx"
                     includes="dynamic"/-->
        
        <Event name="RMaxShoulderIroAro" phase="RCycle" method="max"
               includes="dynamic_shoulder_ele" process="post">RShoulderIroAroAngle*1.0</Event>
        <Event name="RMinShoulderIroAro" phase="RCycle" method="min"
               includes="dynamic_shoulder_ele" process="post">RShoulderIroAroAngle*1.0</Event>
    
    
        <!--  Schultergürtel Bewegung -->
        
        <!-- Depression/Elevation -->
        
        <DirectedCosinAngle name="RShoulderGirdleEleDepOffset"
             FirstVector="normalize(RGHJC-CLAV)"
             SecondVector="normalize(RSHO-CLAV)"
             calibrateIncludes="static_calibrate_shoulder3"
             excludes="static_calibrate,static_calibrate_ellbow,static_calibrate_shoulder,dynamic_calibrate_left_ellbow,dynamic_calibrate_right_ellbow,dynamic_calibrate_left_shoulder,dynamic_calibrate_right_shoulder,static_calibrate_shoulder2,locator"/>
        <!-- Referenz ist der Thorax -->
        <DirectedCosinAngle name="RShoulderGirdleEleDepA"
             FirstVector="-LongitudinalAxisISB"
             SecondVector="normalize(RGHJC-CLAV)"
             includes="dynamic,static"/>
        <Real name="RShoulderGirdleEleDepAngle"
             includes="dynamic,static">RShoulderGirdleEleDepAAngle-90.0+RShoulderGirdleEleDepOffsetAngleAverage</Real>
          
        <!-- Referenz Thorax + Becken + Kalibration als Öffnungswinkel-->
        <DirectedCosinAngle name="RShoulderGirdleEleDepC"
             FirstVector="-LongitudinalAxisHDCal"
             SecondVector="normalize(RGHJC-CLAV)"
             includes="dynamic"/>
        <Real name="RShoulderGirdleEleDepHDCalAngle"
             includes="dynamic">RShoulderGirdleEleDepCAngle-90.0+RShoulderGirdleEleDepOffsetAngleAverage</Real>   
             
        <Event name="RMaxShoulderGirdleEleDep" phase="RCycle" method="max"
               includes="dynamic_shoulder_ele" process="post">RShoulderGirdleEleDepHDCalAngle*1.0</Event>
        <Event name="RMinShoulderGirdleEleDep" phase="RCycle" method="min"
               includes="dynamic_shoulder_ele" process="post">RShoulderGirdleEleDepHDCalAngle*1.0</Event>
    
      
        <!-- Pro-/Retraction -->
        
        <ProjectionAngle name="RShoulderGirdleProRetracProj0"
             Axis="LongitudinalAxisISB"
             FirstVector="MedioLateralAxisISB"
             SecondVector="normalize(RGHJC-CLAV)"
             unsigned="false"
             includes="dynamic"/>                                                                                                          
        <Real name="RShoulderGirdleProRetracProjAngle"
             includes="dynamic">RShoulderGirdleProRetracProj0Angle+30.0</Real> 
             
        <!-- an Thorax + Becken festgemacht mit Kalibraton, Projektionswinkel -->
        <!-- das ist korrekt -->
        <ProjectionAngle name="RShoulderGirdleProRetracB"
             Axis="LongitudinalAxisHDCal"
             FirstVector="MedioLateralAxisHDCal"
             SecondVector="normalize(RGHJC-CLAV)"
             unsigned="false"
             includes="dynamic"/>    
        <Real name="RShoulderGirdleProRetracHDCalProjAngle"
             includes="dynamic">RShoulderGirdleProRetracBAngle+30.0</Real>    
            
       
                     
        <!-- elbow flexion/extension -->
        
        <ProjectionAngle name="RElbowFlexExt"
             Axis="RElbowHingeAxis"
             FirstVector="(REJC-RGHJC)"
             SecondVector="(RWJC-REJC)"
             unsigned="false"
             includes="dynamic"/>
             
        <!-- wrist supination/pronation -->
        <ProjectionAngle name="RProSupiProj"
             Axis="-(RWJC-REJC)"
             FirstVector="RElbowHingeAxis*(RWJC-REJC)"
             SecondVector="normalize(RRAD-RULN)"
             unsigned="false"
             includes="dynamic"/> 


        <!-- hand gelenk -->
        <!--ProjectionAngle name="RHandFlexExt"
             Axis="RRAD-RULN"
             FirstVector="RWJC-REJC"
             SecondVector="RMCD-RMCP"
             unsigned="false"
             includes="dynamic"/>              

        <ProjectionAngle name="RHandRadUln"
             Axis="-(RWJC-REJC)*(RRAD-RULN)"
             FirstVector="RWJC-REJC"
             SecondVector="RMCD-RMCP"
             unsigned="false"
             includes="dynamic"/-->


       
        
        <!-- Humerus -->
        
        <CoordinateSystem name="Right_Humerus"
              Position="RHUMS"
              FirstAxis="RHUMP-RHUMA"
              DefiningVector="RHUMA-RHUMS"
              orientation="xyz"/>
        
        <Point name="REL"
              coordinateSystem="RElbow"
              excludes="static_calibrate_right_GH,static_calibrate_left_GH,static_calibrate_T8,static_calibrate_IJ,static_calibrate_PX,static_calibrate_right_SC,static_calibrate_right_AC,static_calibrate_right_TS,static_calibrate_right_AI,static_calibrate_right_AA,static_calibrate_right_PC"
              calibrateIncludes="static_calibrate_right_EL">P</Point>
        <Point name="REM"
              coordinateSystem="RElbow"
              excludes="static_calibrate_right_GH,static_calibrate_left_GH,static_calibrate_T8,static_calibrate_IJ,static_calibrate_PX,static_calibrate_right_SC,static_calibrate_right_AC,static_calibrate_right_TS,static_calibrate_right_AI,static_calibrate_right_AA,static_calibrate_right_PC,static_calibrate_right_EL"
              calibrateIncludes="static_calibrate_right_EM">P</Point>
    <!--/SubModel-->
             
    
    
    <!-- _______________________________________________________LINKE SEITE -->  
    <!--SubModel name="LeftSide"
              includes="left"-->
              
        
                
        <!-- ___________________________________Ellenbogen-Scharniergelenk -->
        
        <!-- Bestimmung einer groben Scharniergelenksachse ohne jede Calibration -->
        <Point name="LWJC">LULN+0.2*(LRAD-LULN)</Point>        
          
        <CoordinateSystem name="LElbow"
              Position="LWJC*1.0"
              FirstAxis="normalize(LWJC-LELB)"
              DefiningVector="normalize(LWJC-LELBW)"/>   
  
        <Point name="LLEP"
               coordinateSystem="LElbow"
               excludes="locator"
               calibrateIncludes="static_calibrate">LELBW+normalize(LELBW-LELB)*50.0</Point>
        <Point name="LMEP"
               coordinateSystem="LElbow"
               excludes="locator"
               calibrateIncludes="static_calibrate">LELB-normalize(LELBW-LELB)*50.0</Point>
        <Point name="LEJC0"
               excludes="locator">(LLEP+LMEP)/2.0</Point>
        <Vector name="LElbowHingeSimpleAxis"
               excludes="locator">normalize(LLEP-LMEP)</Vector>
                
        <AoRGamage2002 name="LElbowHinge"
               coordinateSystem="LElbow"
               ReferencePoint="LEJC0"
               SignAxis="LElbowHingeSimpleAxis"
               startEventType="LHS"
               endEventType="LTO"
               calibrateIncludes="dynamic_calibrate_left_ellbow"
               includes="static_calibrate_shoulder2,static_calibrate_shoulder3,dynamic_calibrate_left_shoulder,dynamic,static">LHUMS</AoRGamage2002>         
        
        <Point name="LEJC"
               includes="static_calibrate_shoulder2,static_calibrate_shoulder3,dynamic_calibrate_left_shoulder,static,dynamic">LElbowHingeOrigin</Point>
                 
       
        <Point name="LElbowAxisHead"
               includes="static_calibrate_shoulder2,dynamic_calibrate_left_shoulder,dynamic">LElbowHingeOrigin+100*LElbowHingeAxis</Point>

        <!--Because there is sometimes a wrong direction for this axis. Why? No idea -->
        <Point name="LElbowHingeAxisC"
               includes="static_calibrate_shoulder2,dynamic_calibrate_left_shoulder,dynamic">LElbowHingeAxis*1</Point>

                             
        <!-- ________________________________________________________Schultergelenkszentrum bestimmen -->
        <!-- The orientation of the axis is important to compute the corrected shoulder position-->
        <CoordinateSystem name="R_LThorax"
              Position="CLAV"
              FirstAxis="-MedioLateralAxisISB"
              Line="AntPostAxisISB"
              orientation="xyz"
              excludes="locator,static_calibrate,static_calibrate_ellbow,dynamic_calibrate_left_ellbow,dynamic_calibrate_right_ellbow"/>

               
        <CoordinateSystem name="LClavicle"
              Position="(LSHO+LSHO)/2.0"
              FirstAxis="normalize(LSHO-CLAV)"
              Line="normalize(LongitudinalAxisISB)"
              orientation="xyz"
              includes="static_calibrate_shoulder,static_calibrate_shoulder2,static_calibrate_shoulder3,dynamic_calibrate_left_shoulder,dynamic,static"/>
              

        <!-- first estimation of elevation angle for phase definitions -->
        <DirectedCosinAngle name="LHumAbdukClav"
             SecondVector="-z(LClavicle)"
             FirstVector="normalize(LHUMS-LSHO)"
             includes="dynamic_calibrate_left_shoulder"/>
        <TDP name="LHumAbdukAngleMin" 
             method="min"
             process="post"
             calibrateIncludes="dynamic_calibrate_left_shoulder"
             includes="dynamic_calibrate_left_shoulder">LHumAbdukClavAngle</TDP>
         
        <Phase name="LAbduk"                                                         
             process="post"
             calibrateIncludes="dynamic_calibrate_left_shoulder"
             includes="dummy">(LHumAbdukClavAngle &lt; (FuncionalTrialAbdukROM + 10.0 + LHumAbdukAngleMin)) &amp;&amp; (LHumAbdukClavAngle &gt; (10.0 + LHumAbdukAngleMin))
        </Phase>
  
  
        <CoRGamage2002 name="LGHJCGamage"
             coordinateSystem="LClavicle"
             phase="LAbduk"
             biasCompensation="true"
             biasCompensationIterations="5"
             calibrateIncludes="dynamic_calibrate_left_shoulder"
             includes="static_calibrate_shoulder2,static_calibrate_shoulder3,dynamic,static">LHUMS</CoRGamage2002>

         <!-- Schultergelenkszentrum - Berechnung nach Rab -->
         <Point name="LGHJCRab"
                coordinateSystem="LClavicle"
                includes="static_calibrate_shoulder2,static_calibrate_shoulder3,dynamic,static"
                calibrateIncludes="static_calibrate_shoulder">LSHO-vec(0.0,0.0,1.0)*RabShoulderDist</Point>

              
        <!-- orig -->
        <CoordinateSystem name="LHumerus"
              Position="LHUMS"
              FirstAxis="normalize(LHUMS-LEJC)"
              Line="normalize(LElbowHingeAxisC)"
              orientation="xyz"
              includes="static_calibrate_shoulder2,dynamic"/>
              
        <!-- zusätzliche Humerusmarker -->
        <CoordinateSystem name="LHumerusA"
              Position="LHUMS"
              FirstAxis="normalize(LHUMA-LHUMP)"
              Line="normalize(LEJC-LHUMS)"
              orientation="xyz"
              includes="static_calibrate_shoulder2,static_calibrate_shoulder3,dynamic"
              excludes="locator"/>
        
        <!-- Projektion von LGHJC auf die Elbow axis -->
        <Point name="LEJCA"
              coordinateSystem="LElbow"
              calibrateIncludes="static_calibrate_shoulder2"
              excludes="static_calibrate,static_calibrate_ellbow,static_calibrate_shoulder,dynamic_calibrate_left_ellbow,dynamic_calibrate_right_ellbow,dynamic_calibrate_left_shoulder,dynamic_calibrate_right_shoulder,locator">PocL(LEJC, normalize(LElbowHingeAxis),LGHJCGamageOrigin)</Point>
      

        <!--Point name="LGHJC"
              coordinateSystem="LHumerus"
              calibrateIncludes="static_calibrate_shoulder2"
              excludes="static_calibrate,static_calibrate_ellbow,static_calibrate_shoulder,dynamic_calibrate_left_ellbow,dynamic_calibrate_right_ellbow,dynamic_calibrate_left_shoulder,dynamic_calibrate_right_shoulder">LGHJCGamageOrigin</Point-->

        <!--Point name="LGHJCA"
              coordinateSystem="LHumerusA"
              calibrateIncludes="static_calibrate_shoulder2"
              excludes="static_calibrate,static_calibrate_ellbow,static_calibrate_shoulder,dynamic_calibrate_left_ellbow,dynamic_calibrate_right_ellbow,dynamic_calibrate_left_shoulder,dynamic_calibrate_right_shoulder">LGHJCGamageOrigin</Point>
        <DirectedCosinAngle name="LShoulderGirdleDepEleOffsetA"
             SecondVector="normalize(LGHJCA-CLAV)"
             FirstVector="normalize(LSHO-CLAV)"
             includes="dynamic"/-->
       
        <!-- Projektion von LHUM auf die Achse REJC-RGHJC und an dem unzuverlässigen
             Koordinatensystem (HUMS, LHUMA, LHUMP, LEJC) festgemacht  -->
        <Point name="LHUMC"
              coordinateSystem="LHumerusA"
              calibrateIncludes="static_calibrate_shoulder2"
              excludes="static_calibrate,static_calibrate_ellbow,static_calibrate_shoulder,dynamic_calibrate_left_ellbow,dynamic_calibrate_right_ellbow,dynamic_calibrate_left_shoulder,dynamic_calibrate_right_shoulder,locator">PocL(LEJCA, normalize(LGHJCGamageOrigin - LEJCA),LHUMS)</Point>
        <!-- mit REJC statt REJCA -->
        <!--Point name="LHUMC2"
              coordinateSystem="LHumerusA"
              calibrateIncludes="static_calibrate_shoulder2"
              excludes="static_calibrate,static_calibrate_ellbow,static_calibrate_shoulder,dynamic_calibrate_left_ellbow,dynamic_calibrate_right_ellbow,dynamic_calibrate_left_shoulder,dynamic_calibrate_right_shoulder">PocL(LEJC, normalize(LGHJCGamageOrigin - LEJC),LHUMS)</Point-->
    
        <!-- proximale Humerus length, also von HUMC bis GHJC -->
        <Real name="LHumLengthProx"
              calibrateIncludes="static_calibrate_shoulder2"
              excludes="static_calibrate,static_calibrate_ellbow,static_calibrate_shoulder,dynamic_calibrate_left_ellbow,dynamic_calibrate_right_ellbow,dynamic_calibrate_left_shoulder,dynamic_calibrate_right_shoulder,locator">length(LGHJCGamageOrigin - LHUMC)</Real>
        <!--Real name="LHumLengthProx2"
              calibrateIncludes="static_calibrate_shoulder2"
              excludes="static_calibrate,static_calibrate_ellbow,static_calibrate_shoulder,dynamic_calibrate_left_ellbow,dynamic_calibrate_right_ellbow,dynamic_calibrate_left_shoulder,dynamic_calibrate_right_shoulder">length(LGHJCGamageOrigin - LHUMC2)</Real-->
       
        <!-- an HUMC, LEJCA, elbowaxis und Oberarmlänge festgemacht-->
        <Point name="LGHJC"
              excludes="static_calibrate,static_calibrate_ellbow,static_calibrate_shoulder,dynamic_calibrate_left_ellbow,dynamic_calibrate_right_ellbow,dynamic_calibrate_left_shoulder,dynamic_calibrate_right_shoulder,locator">LHUMC+normalize(LHUMC - LEJCA)*LHumLengthProx</Point>
        <!--Point name="LGHJC2"
              excludes="static_calibrate,static_calibrate_ellbow,static_calibrate_shoulder,dynamic_calibrate_left_ellbow,dynamic_calibrate_right_ellbow,dynamic_calibrate_left_shoulder,dynamic_calibrate_right_shoulder">LHUMC2+normalize(LHUMC2 - LEJC)*LHumLengthProx2</Point-->
    
              
        
        <!--  Schoulder -->
        
       
        <!-- Öffnungswinkel --> 
        
        <!-- Shoulder Elevation -->
        <Angle name="LShoulderEleDepDirCos"
               FirstVector="-LongitudinalAxisISB"
               SecondVector="LEJC-LGHJC"
               includes="dynamic"/>
        <Angle name="LShoulderEleDepHDCalDirCos"
               FirstVector="-LongitudinalAxisHDCal"
               SecondVector="LEJC-LGHJC"
               includes="dynamic"/>
        
        <!-- Shoulder Abduktion -->
        <Angle name="LShoulderAbdAddJointB0"
               FirstVector="MedioLateralAxisISB"
               SecondVector="LEJC-LGHJC"
               includes="dynamic"/>
        <Real name="LShoulderAbdAddDirCosAngle"
             includes="dynamic">LShoulderAbdAddJointB0Angle-90.0</Real>
        <Angle name="LShoulderAbdAddJointHDCal"
               FirstVector="MedioLateralAxisHDCal"
               SecondVector="LEJC-LGHJC"
               includes="dynamic"/>
        <Real name="LShoulderAbdAddHDCalDirCosAngle"
             includes="dynamic">LShoulderAbdAddJointHDCalAngle-90.0</Real>
        
        <Phase name="LAbdukStart" 
           process="post" minwidth="10"
           value="LShoulderEleDepHDCalDirCosAngle*1.0" 
           includes="dynamic_abduk_events">LShoulderEleDepHDCalDirCosAngle &lt; 30.0</Phase>
        <Event name="LAbdukMin" phase="LAbdukStart" method="min"
               includes="dynamic_abduk_events" process="post">LShoulderEleDepHDCalDirCosAngle*1.0</Event>   
        <Phase name="LAbdukPhase" 
           process="post" maxvalue="40.0" minwidth="40"
           startEvent="LAbdukMin" endEvent="LAbdukMin"
           value="LShoulderEleDepHDCalDirCosAngle*1.0" 
           includes="dynamic_abduk_events"/>
        <Event name="LEleMax" phase="LAbdukPhase" method="max"
               includes="dynamic_abduk_events" process="post">LShoulderEleDepHDCalDirCosAngle*1.0</Event> 
        
        <Angle name="LGlenohumeralEleDepHDCalDirCos"
               FirstVector="normalize(LEJC-LGHJC)"
               SecondVector="normalize(-AntPostAxisHDCal*(LGHJC-CLAV))"
               includes="dynamic"/>
        <Angle name="LGlenohumeralEleDepDirCos"
               FirstVector="normalize(LEJC-LGHJC)"
               SecondVector="normalize(-AntPostAxisISB*(LGHJC-CLAV))"
               includes="dynamic"/>
        
        <!-- AnteRetroversion -->
        <Angle name="LShoulderAnteRetroJointISB"
               FirstVector="-AntPostAxisISB"
               SecondVector="LEJC-LGHJC"
               includes="dynamic"/>
        <Real name="LShoulderAnteRetroDirCosAngle"
             includes="dynamic">LShoulderAnteRetroJointISBAngle-90.0</Real>
        <Angle name="LShoulderAnteRetroJointHDCal"
               FirstVector="-AntPostAxisHDCal"
               SecondVector="LEJC-LGHJC"
               includes="dynamic"/>
        <Real name="LShoulderAnteRetroHDCalDirCosAngle"
             includes="dynamic">LShoulderAnteRetroJointHDCalAngle-90.0</Real>
         
        <Phase name="LAntePhase" 
           process="post" maxvalue="30.0" minwidth="40"
           value="LShoulderAnteRetroHDCalDirCosAngle*1.0" 
           includes="dynamic_anteretro_events">LShoulderAnteRetroHDCalDirCosAngle &gt; 0.0</Phase>
        <Phase name="LRetroPhase" 
           process="post" minvalue="-25.0" minwidth="40"
           value="LShoulderAnteRetroHDCalDirCosAngle*1.0" 
           includes="dynamic_anteretro_events">LShoulderAnteRetroHDCalDirCosAngle &lt; 0.0</Phase>
        <Event name="LEleMax" phase="LAntePhase" method="max"
               includes="dynamic_ante_events" process="post">LShoulderAnteRetroHDCalDirCosAngle*1.0</Event> 
        <Event name="LEleMax" phase="LRetroPhase" method="min"
               includes="dynamic_retro_events" process="post">LShoulderAnteRetroHDCalDirCosAngle*1.0</Event> 
       
   
        <!-- Projektionswinkel --> 
        
        <!-- Abduktion -->
        <ProjectionAngle name="LShoulderAbdAddProj"
             Axis="AntPostAxisISB"
             FirstVector="-LongitudinalAxisHDCal"
             SecondVector="(LEJC-LGHJC)"
             includes="dynamic"
             unsigned="false"/>
        <ProjectionAngle name="LShoulderAbdAddHDCalProj"
               Axis="AntPostAxisHDCal"
               FirstVector="-LongitudinalAxisHDCal"
               SecondVector="LEJC-LGHJC"
               includes="dynamic"
               unsigned="false"/>
        
        <!-- Horizontal abduction/adduction oder Horizontal Ante/Retroversion -->
        <!-- TODO umstellen: 0 soll vorne sein -->
        <!--ProjectionAngle name="LShoulderHorAbdAddProj"
             Axis="-LongitudinalAxisISB"
             JointCenter="LGHJC"
             LeverArmPoint1="LGHJC-MedioLateralAxisISB*500.0"
             LeverArmPoint2="(LEJC+LEJC)/2.0"
             unsigned="false"
             includes="dynamic"/-->              
             
        <!-- Ante/Retroversion --> 
        <ProjectionAngle name="LShoulderAnteRetroProj"
             Axis="MedioLateralAxisISB"
             FirstVector="-LongitudinalAxisISB"
             SecondVector="LEJC-LGHJC"
             unsigned="false"
             includes="dynamic"/>
        <ProjectionAngle name="LShoulderAnteRetroHDCalProj"
             Axis="MedioLateralAxisHDCal"
             FirstVector="-LongitudinalAxisHDCal"
             SecondVector="LEJC-LGHJC"
             unsigned="false"
             includes="dynamic"/>  
        
        
        <!-- Iro/Aro -->
        
        <ProjectionAngle name="LShoulderIroAroJoint0"
             Axis="-(LEJC-LGHJC)"
             FirstVector="LongitudinalAxisISB*(LEJC-LGHJC)"
             SecondVector="((LEJC-LGHJC)*(LWJC-LEJC))*(LEJC-LGHJC)"
             includes="dynamic"/>
        <Real name="LShoulderIroAroAngleGlobe"
             includes="dynamic">180.0-LShoulderIroAroJoint0Angle</Real>
        <ProjectionAngle name="LShoulderIroAroJointHdCal"
             Axis="-(LEJC-LGHJC)"
             FirstVector="LongitudinalAxisHDCal*(LEJC-LGHJC)"
             SecondVector="((LEJC-LGHJC)*(LWJC-LEJC))*(LEJC-LGHJC)"
             includes="dynamic"/>
        <Real name="LShoulderIroAroHDCalAngleGlobe"
             includes="dynamic">180.0-LShoulderIroAroJointHdCalAngle</Real>

        <!-- Parting convention -->

        <!-- Implementierung mit linkshändigem Koordinatensystem
             AntPostAxisISB zeigt nach vorne
             unklar ob das alles so stimmt, 3d-Visu nötig um
             das zu überprüfen -->
        <CoordinateSystem name="LConjunct"
                 Position="LGHJC"
                 FirstAxis="AntPostAxisISB"
                 DefiningVector="-MedioLateralAxisISB"
                 orientation="xzy"
                 forceRightHanded="false"
                 includes="dynamic"/>
        <ConjunctRotation name="LShoulderConjunctRotation"
                   coordinateSystem="LConjunct"
                   RadiusVector="normalize(LEJC-LGHJC)"
                   PointingVector="normalize(LEJC-LGHJC)*LElbowHingeAxis"
                   includes="dynamic"/>
        <!-- unklar, warum hier das Vorzeichen geändert werden muss -->
        <Real name="LShoulderIroAroAngle"
              includes="dynamic">-LShoulderConjunctRotationAngle</Real>
        <CoordinateSystem name="LConjunctHDCal"
                 Position="LGHJC"
                 FirstAxis="AntPostAxisHDCal"
                 DefiningVector="-MedioLateralAxisHDCal"
                 orientation="xzy"
                 forceRightHanded="false"
                 includes="dynamic"/>
        <ConjunctRotation name="LShoulderConjunctRotationHDCal"
                   coordinateSystem="LConjunctHDCal"
                   RadiusVector="normalize(LEJC-LGHJC)"
                   PointingVector="normalize(LEJC-LGHJC)*LElbowHingeAxis"
                   includes="dynamic"/>
        <!-- unklar, warum hier das Vorzeichen geändert werden muss -->
        <Real name="LShoulderIroAroHDCalAngle"
              includes="dynamic">-LShoulderConjunctRotationHDCalAngle</Real>

        <!-- x rot vorne
             z blau nach außen
             y grün nach oben bzw. Hum-Achse in Richtung Schulterzentrum -->
        <CoordinateSystem name="LHumuersHDCalA"
                 Position="LGHJC"
                 FirstAxis="normalize(LGHJC-LEJC)"
                 DefiningVector="normalize(LElbowHingeAxis)"
                 orientation="yxz"
                 includes="dynamic"/>
        <CoordinateSystem name="LThoraxHDCalA"
                 Position="LGHJC"
                 FirstAxis="LongitudinalAxisHDCal"
                 DefiningVector="MedioLateralAxisHDCal"
                 orientation="yxz"
                 includes="dynamic"/>
        <AdjunctRotation name="LShoulderHDAdjunctRotation"
                         basisCoordinateSystem="LThoraxHDCalA"
                         movingCoordinateSystem="LHumuersHDCalA"
                         eventType="LHS"
                         unit="deg"
                         includes="dynamic">vec(0,-LShoulderIroAroHDCalAngle,0)</AdjunctRotation>
               
        <!-- ungetestet -->
        <EulerCardanAngles name="LShoulderIroAroHDCalAngleGlobe3a"
                     parentCoordinateSystem="LThoraxHDCalA"
                     childCoordinateSystem="LHumuersHDCalA"
                     orientation="yxy"
                     method="fix2"
                     includes="dynamic"/>
        <Real name="LShoulderIroAroHDCalAngleGlobe3"
              includes="dynamic">-z(LShoulderIroAroHDCalAngleGlobe3aAngles)</Real>


        <Event name="LMaxShoulderIroAro" phase="LCycle" method="max"
               includes="dynamic_shoulder_ele" process="post">LShoulderIroAroAngle*1.0</Event>
        <Event name="LMinShoulderIroAro" phase="LCycle" method="min"
               includes="dynamic_shoulder_ele" process="post">LShoulderIroAroAngle*1.0</Event>
     
     
        <!--  Shouldergirdle movements -->
        
        <!-- Depression/Elevation -->
        
        <DirectedCosinAngle name="LShoulderGirdleEleDepOffset"
             SecondVector="normalize(LGHJC-CLAV)"
             FirstVector="normalize(LSHO-CLAV)"
             calibrateIncludes="static_calibrate_shoulder3"
             excludes="static_calibrate,static_calibrate_ellbow,static_calibrate_shoulder,dynamic_calibrate_left_ellbow,dynamic_calibrate_right_ellbow,dynamic_calibrate_left_shoulder,dynamic_calibrate_right_shoulder,static_calibrate_shoulder2,locator"/>
             
        <!-- am Thorax festgemacht -->
        <DirectedCosinAngle name="LShoulderGirdleEleDepA"
             FirstVector="-LongitudinalAxisISB"
             SecondVector="normalize(LGHJC-CLAV)"
             includes="dynamic,static"/>
        <Real name="LShoulderGirdleEleDepAngle"
             includes="dynamic,static">LShoulderGirdleEleDepAAngle-90.0+LShoulderGirdleEleDepOffsetAngleAverage</Real>
                
        <!-- am Throax und Becken festgemacht und kalibriert als Öffnungswinkel -->
        <DirectedCosinAngle name="LShoulderGirdleEleDepC"
             SecondVector="normalize(LGHJC-CLAV)"
             FirstVector="-LongitudinalAxisHDCal"
             includes="dynamic"/>
        <Real name="LShoulderGirdleEleDepHDCalAngle"
             includes="dynamic">LShoulderGirdleEleDepCAngle-90.0+LShoulderGirdleEleDepOffsetAngleAverage</Real>  
             
        <Event name="LMaxShoulderGirdleEleDep" phase="LCycle" method="max"
               includes="dynamic_shoulder_ele" process="post">LShoulderGirdleEleDepHDCalAngle*1.0</Event>
        <Event name="LMinShoulderGirdleEleDep" phase="LCycle" method="min"
               includes="dynamic_shoulder_ele" process="post">LShoulderGirdleEleDepHDCalAngle*1.0</Event>
    
        <!-- Protraktion/Retraktion -->
        
        <ProjectionAngle name="LShoulderGirdleProRetracProj0"
             Axis="-LongitudinalAxisISB"
             FirstVector="-MedioLateralAxisISB"
             SecondVector="normalize(LGHJC-CLAV)"
             unsigned="false"
             includes="dynamic"/>    
        <Real name="LShoulderGirdleProRetracProjAngle"
             includes="dynamic">LShoulderGirdleProRetracProj0Angle+30.0</Real>  
             
        
        <!-- am Thorax + Becken festgemacht, mit Kalibration, Projektionswinkel -->
        <ProjectionAngle name="LShoulderGirdleProRetracB"
             Axis="-LongitudinalAxisHDCal"
             FirstVector="-MedioLateralAxisHDCal"
             SecondVector="normalize(LGHJC-CLAV)"
             unsigned="false"
             includes="dynamic"/>    
        <Real name="LShoulderGirdleProRetracHDCalProjAngle"
             includes="dynamic">LShoulderGirdleProRetracBAngle+30.0</Real>    
             
        
        <!-- elbow flexion/extension -->
        <ProjectionAngle name="LElbowFlexExt"
             Axis="-LElbowHingeAxisC"
             FirstVector="(LEJC-LGHJC)"
             SecondVector="(LWJC-LEJC)"
             unsigned="false"
             includes="dynamic"/>

        <!-- Wrist supination/pronation-->
        <ProjectionAngle name="LProSupiProj"
             Axis="(LWJC-LEJC)"
             FirstVector="-LElbowHingeAxisC*(LWJC-LEJC)"
             SecondVector="normalize(LRAD-LULN)"
             unsigned="false"
             includes="dynamic"/>
   
        <!-- hand gelenk -->
        <!--ProjectionAngle name="LHandFlexExt"
             Axis="-(LRAD-LULN)"
             FirstVector="LWJC-LEJC"
             SecondVector="LMCD-LMCP"
             unsigned="false"
             includes="dynamic"/-->              

        <!--ProjectionAngle name="LHandRadUln"
             Axis="-(LWJC-LEJC)*(LRAD-LULN)"
             FirstVector="LWJC-LEJC"
             SecondVector="LMCD-LMCP"
             unsigned="false"
             includes="dynamic"/-->

        
        <!-- Humerus -->
        <CoordinateSystem name="Left_Humerus"
              Position="LHUMS"
              FirstAxis="LHUMP-LHUMA"
              DefiningVector="LHUMA-LHUMS"
              orientation="xyz"/>
        <Point name="LEL"
              coordinateSystem="LElbow"
              excludes="static_calibrate_right_GH,static_calibrate_left_GH,static_calibrate_T8,static_calibrate_IJ,static_calibrate_PX,static_calibrate_right_SC,static_calibrate_right_AC,static_calibrate_right_TS,static_calibrate_right_AI,static_calibrate_right_AA,static_calibrate_right_PC,static_calibrate_right_EL,static_calibrate_right_EM,static_calibrate_right_RS,static_calibrate_right_US,static_calibrate_left_SC,static_calibrate_left_AC,static_calibrate_left_TS,static_calibrate_left_AI,static_calibrate_left_AA,static_calibrate_left_PC"
              calibrateIncludes="static_calibrate_left_EL">P</Point>
        <Point name="LEM"
              coordinateSystem="LElbow"
              excludes="static_calibrate_right_AA,static_calibrate_left_AA,static_calibrate_T8,static_calibrate_right_SC,static_calibrate_right_AC,static_calibrate_right_TS,static_calibrate_right_AI,static_calibrate_right_PC,static_calibrate_right_EL,static_calibrate_right_EM,static_calibrate_left_SC,static_calibrate_left_AC,static_calibrate_left_TS,static_calibrate_left_AI,static_calibrate_left_PC,static_calibrate_left_EL"
              calibrateIncludes="static_calibrate_left_EM">P</Point>
    <!--/SubModel-->
    
    <!--right_sternum: QSP = quasi sagital plane normal vector, right
        QSP=(IJ-C7)*(IJ-0.5(PX+T8), 
        y=0.5(IJ+C7)-0.5*(PX+T8) up, 
        x=y*QSP forward, 
        z=x*y right? das muss doch links sein,
        Drehreihenfolge geändert, leicht anders definiert damit implementierbar, 
        identisch für linke/rechte Seite -->
    <CoordinateSystem name="RThorax_ISB"
              Position="CLAV"
              FirstAxis="(CLAV+C7)*0.5-(STRN+T8)*0.5"
              DefiningVector="CLAV-C7"
              orientation="yzx"
              excludes="locator"/> 
    <!--
        origin = IJ;
        QSP = cross(IJ-C7,IJ-0.5*(PX+T8)); % quasi sagital plane normal vector (pointing right)
        y = 0.5*(IJ+C7)-0.5*(PX+T8); % up
        x = cross(y,QSP); % forward
        z = cross(x,y); % pointing right -->
    <CoordinateSystem name="LThorax_ISB"
              Position="CLAV"
              FirstAxis="(CLAV+C7)*0.5-(STRN+T8)*0.5"
              DefiningVector="C7-CLAV"
              orientation="yzx"
              excludes="locator"/> 
   
    <!-- z (blaue) nach lateral
         x (rot) nach vorne
         y (grün) nach oben   
     
         right acriomion/scapula: anatomical system: origin=AA, QFP=(AA-AI)*(QFP-TS), 
         z = QFP-TS, 
         y= z*QFP, 
         x = y*Z, das geht so nicht zu implementieren, daher
         Drehreihenfolge getauscht etc.  das stimmt jetzt mit dem ISB-Vortrag überein, ist allerdings
         leicht verschieden, die grobe Ausrichtung der Achsen scheint zu stimmen 
    -->
    <CoordinateSystem name="RScapula_ISB"
              Position="RAA*1.0"
              FirstAxis="RAA-RTS"
              DefiningVector="RAA-RAI"
              orientation="zxy"
              excludes="locator"/> 
    <!-- left origin=AA, QFP=(AA-TS)*(AA-AI) quasi frontal plane normal vector ventral nach vorne, 
         z=TS-AA medial, 
         y=z*QFP up, 
         x=y*z ventral, nach vorne, Implementierung anders, 
         als ULema, da das so nicht geht, vermutlich leichte Abweichung aber grundsätzlich
         ist das gleich:
         
         z (blaue) nach lateral
         x (rot) nach hinten
         y (grün) nach oben                -->
    <CoordinateSystem name="LScapula_ISB"
              Position="(LAA+LAA)/2.0"
              FirstAxis="LAA-LTS"
              DefiningVector="LTS-LAI"
              orientation="zxy"
              excludes="locator"/> 
    
    
    <!-- Scapula angles -->
    
    <!-- CreateBodyJoint('Right_Scapula', 5, [5 4], [Y X Z],'FirstSolution');        
              % joint 5 scapula relative to trunk
         z (blaue) nach lateral
         x (rot) nach vorne
         y (grün) nach oben -->
    <EulerCardanAngles name="R_Scapula"
                       parentCoordinateSystem="RThorax_ISB"
                       childCoordinateSystem="RScapula_ISB"
                       orientation="yxz"
                       method="fix1"
                       includes="dynamic"/>
    <!--SetAnglesMeaning(5, [1 1 1], {'RScapProRetraction', 'RScapRotation', 'RScapTilting'});-->
    <!-- protraction(+), retraction(-) ok-->
    <Real name="RScapProRetraction" excludes="locator"
          includes="dynamic">x(R_ScapulaAngles)</Real>
          
    <Real name="RScapRotation" excludes="locator" includes="dynamic">-y(R_ScapulaAngles)</Real>
    <Real name="RScapTilting" excludes="locator" includes="dynamic">z(R_ScapulaAngles)</Real>
    
    <!-- CreateBodyJoint('Left_Scapula', 15, [11 10], [Y X Z],'FirstSolution');     % joint 5 scapula relative to trunk-->
    <EulerCardanAngles name="L_Scapula"
                       parentCoordinateSystem="LThorax_ISB"
                       childCoordinateSystem="LScapula_ISB"
                       orientation="yxz"
                       method="fix1"
                       excludes="locator" includes="dynamic"/>
    <!--ULEMA SetAnglesMeaning(15, [-1 -1 1], {'LScapProRetraction', 'LScapRotation', 'LScapTilting'});-->
    <Real name="LScapProRetraction" excludes="locator" includes="dynamic">-x(L_ScapulaAngles)</Real>
    <!-- lateral(-)/medial rotation -->
    <Real name="LScapRotation" excludes="locator" includes="dynamic">-y(L_ScapulaAngles)</Real>
    <!-- Vorzeichen ist unklar? scheint korrekt zu sein, obwohl hier kein
         Vorzeichen stehen darf -->
    <Real name="LScapTilting" excludes="locator" includes="dynamic">-z(L_ScapulaAngles)</Real>
    
    
    <!-- Clavicula angles -->
    
    <CoordinateSystem name="RClavicula_ISB"
              Position="RSC*1.0"
              FirstAxis="RAC-RSC"
              DefiningVector="y(RThorax_ISB)"
              orientation="zxy"
              excludes="static_calibrate,static_calibrate_ellbow,static_calibrate_shoulder,dynamic_calibrate_left_ellbow,dynamic_calibrate_right_ellbow,dynamic_calibrate_left_shoulder,dynamic_calibrate_right_shoulder,static_calibrate_shoulder2,static_calibrate_shoulder3,locator"/> 
    <EulerCardanAngles name="R_Clavicula"
                       parentCoordinateSystem="RThorax_ISB"
                       childCoordinateSystem="RClavicula_ISB"
                       orientation="yxz"
                       method="fix1"
                       excludes="static_calibrate,static_calibrate_ellbow,static_calibrate_shoulder,dynamic_calibrate_left_ellbow,dynamic_calibrate_right_ellbow,dynamic_calibrate_left_shoulder,dynamic_calibrate_right_shoulder,static_calibrate_shoulder2,static_calibrate_shoulder3,locator" 
                       includes="dynamic"/>
    <Real name="RClavProRetraction" excludes="locator" includes="dynamic">x(R_ClaviculaAngles)</Real>
    <Real name="RClavDepressionElevation" excludes="locator" includes="dynamic">-y(R_ClaviculaAngles)</Real>
    
    <!--DirectedCosinAngle name="RClavDepressionElevationA"
             SecondVector="z(RClavicula_ISB)"
             FirstVector="y(RThorax_ISB)"
             excludes="static_calibrate,static_calibrate_ellbow,static_calibrate_shoulder,dynamic_calibrate_left_ellbow,dynamic_calibrate_right_ellbow,dynamic_calibrate_left_shoulder,dynamic_calibrate_right_shoulder,static_calibrate_shoulder2,static_calibrate_shoulder3,locator" 
             includes="dynamic"/--> 
             
             
    <CoordinateSystem name="LClavicula_ISB"
              Position="LSC*1.0"
              FirstAxis="LAC-LSC"
              DefiningVector="y(LThorax_ISB)"
              orientation="zxy"
              excludes="locator"/> 
    <EulerCardanAngles name="L_Clavicula"
                       parentCoordinateSystem="LThorax_ISB"
                       childCoordinateSystem="LClavicula_ISB"
                       orientation="yxz"
                       method="fix1"
                       excludes="locator" includes="dynamic"/>
    <Real name="LClavProRetraction" excludes="locator" includes="dynamic">-x(L_ClaviculaAngles)</Real>
    <Real name="LClavDepressionElevation" excludes="locator" includes="dynamic">-y(L_ClaviculaAngles)</Real>
    
    <!--DirectedCosinAngle name="LClavDepressionElevationA"
             SecondVector="y(LThorax_ISB)"
             FirstVector="z(LClavicula_ISB)"
             excludes="static_calibrate,static_calibrate_ellbow,static_calibrate_shoulder,dynamic_calibrate_left_ellbow,dynamic_calibrate_right_ellbow,dynamic_calibrate_left_shoulder,dynamic_calibrate_right_shoulder,static_calibrate_shoulder2,static_calibrate_shoulder3,locator" 
             includes="dynamic"/--> 
   
    <!-- linke Seite fehlt noch -->
    <!-- TODO -->
    
    <!-- Testweise -->
    <!--  Cardan vergleich: yxz und letzte Drehung   RScapTilting  entspricht Pzj=arctan(R21,R22)  
         R21=c2s3, R22=c2c3 gamma = atan(R21/R22) -->
    <!-- Vergleich mit Projektionswinkel von Hand gebaut
         Vorzeichen bei Axis und First/SecondVector Zuordnung scheint egal
         zu sein. Im Ergebnis erhalte ich immer falsches Vorzeichen und ca. 2Grad
         Differenz -->
    <!--ProjectionAngle name="RScapTiltingProj2"
             Axis="z(RThorax_ISB)"
             FirstVector="x(RThorax_ISB)"
             SecondVector="x(RScapula_ISB)"
             unsigned="false"
             excludes="locator" 
             includes="dynamic"/-->    
    
    <!-- möglicherweise überschreibt das RScapula_ISB - ist vermutlich mittlerweile behoben -->
    <!--Matrix3x3 name="RScapulaM" excludes="locator" 
              includes="dynamic">RThorax_ISB*t(RScapula_ISB)</Matrix3x3-->
    <!--Real name="RScapTiltingProjAngle"
          excludes="locator" 
          includes="dynamic">atan2(R(RScapulaM,1,0),R(RScapulaM,1,1))*180.0</Real-->
          
    
    <!-- CreateBodyJoint('Right_H2Shoulder', 1, [5 1], [Y X Y],'SecondSolution');     
         % joint 1 humerus relative to trunk-->
    <EulerCardanAngles name="Right_H2Shoulder"
                       parentCoordinateSystem="RThorax_ISB"
                       childCoordinateSystem="RScapula_ISB"
                       orientation="yxy"
                       method="fix2"
                       includes="dynamic"/>
</CalcModel>